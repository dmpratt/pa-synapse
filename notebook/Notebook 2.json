{
	"name": "Notebook 2",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Small33",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "8e97c336-84d6-4585-954a-00903ff442fa"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e62b14ef-8ad7-4fe1-b673-dbe6c34a50dc/resourceGroups/private-analytics/providers/Microsoft.Synapse/workspaces/privateanalytics/bigDataPools/Small33",
				"name": "Small33",
				"type": "Spark",
				"endpoint": "https://privateanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Small33",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run \"/Test/TestNotebook\""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"from notebookutils.mssparkutils import azureML\n",
					"from azureml.core import Workspace, Model\n",
					"import joblib\n",
					"\n",
					"# getWorkspace() takes the linked service name,\n",
					"# not the Azure Machine Learning workspace name.\n",
					"ws = azureML.getWorkspace(\"aml_private_analytics\")\n",
					"#ws = Workspace.from_config()\n",
					"print(ws.name)\n",
					"model_name = \"LeadScore\"\n",
					"\n",
					"model_obj = Model(ws, model_name)\n",
					"\n",
					"for model in Model.list(ws):\n",
					"    print(model.name, model.version)\n",
					"\n",
					"model_path = Model.get_model_path(model_name= \"LeadScore\", version=10, _workspace=ws)\n",
					"print(model_path)\n",
					"modelObj = joblib.load(f\"{model_path}/lead_score_000010.model\")\n",
					""
				],
				"execution_count": 12
			}
		]
	}
}